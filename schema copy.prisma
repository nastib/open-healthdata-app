generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["multiSchema"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    schemas  = ["auth", "hdb"]
}

model Users {
    instanceId String?   @map("instance_id") @db.Uuid
    createdAt  DateTime? @default(now()) @map("created_at")
    id         String    @id @db.Uuid
    role       String?   @db.VarChar(255)
    email      String?   @db.VarChar(255)

    DataEntry            DataEntry[]
    organization_element OrganizationElement[]
    profile              Profile?

    @@index([instanceId])
    @@map("users")
    @@schema("auth")
}

model DataCategory {
    id        Int         @id @default(autoincrement())
    code      String      @unique
    createdAt DateTime?   @default(now()) @map("created_at")
    dataEntry DataEntry[]
    indicator Indicator[]
    variable  Variable[]

    @@map("data_category")
    @@schema("hdb")
}

model DataEntry {
    id                      Int                 @id @default(autoincrement())
    createdAt               DateTime?           @default(now()) @map("created_at")
    variableCode            String              @map("variable_code")
    value                   Float?              @db.Real
    valid                   Boolean?
    year                    Int?
    updatedAt               DateTime?           @default(now()) @map("updated_at")
    categoryCode            String              @map("category_code")
    organizationElementCode String              @map("organization_element_code")
    userId                  String?             @db.Uuid
    period                  DateTime?           @db.Date
    DataCategory            DataCategory        @relation(fields: [categoryCode], references: [code], onDelete: NoAction, onUpdate: NoAction)
    organizationElement     OrganizationElement @relation(fields: [organizationElementCode], references: [code], onDelete: NoAction, onUpdate: NoAction)
    users                   Users?              @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    variable                Variable            @relation(fields: [variableCode], references: [code], onDelete: Cascade, onUpdate: NoAction)

    @@index([categoryCode], map: "idx_DataEntry_category_code")
    @@index([organizationElementCode], map: "idx_DataEntry_organization_element_code")
    @@index([userId], map: "idx_DataEntry_user_id")
    @@index([variableCode], map: "idx_DataEntry_variable_code")
    @@map("data_entry")
    @@schema("hdb")
}

model DataSource {
    id              Int          @id @default(autoincrement())
    createdAt       DateTime?    @default(now()) @map("created_at")
    designation     String?
    type            String?
    parentId        Int?
    dataSource      DataSource?  @relation("dataSourceToDataSource", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    otherDataSource DataSource[] @relation("dataSourceToDataSource")
    variable        Variable[]

    @@map("data_source")
    @@schema("hdb")
}

model Indicator {
    id                  Int          @id @default(autoincrement())
    createdAt           DateTime?    @default(now()) @map("created_at")
    code                String       @unique
    designation         String?
    definition          String?
    goal                String?
    formula             String?
    categoryCode        String       @map("category_code")
    level               String?
    calculationMethod   String?      @map("calculation_method")
    collectionFrequency String?      @map("collection_frequency")
    constraints         String?
    interpretation      String?
    example             String?
    DataCategory        DataCategory @relation(fields: [categoryCode], references: [code], onDelete: NoAction, onUpdate: NoAction)

    @@index([categoryCode], map: "idx_indicator_category_code")
    @@map("indicator")
    @@schema("hdb")
}

model OrganizationElement {
    id            Int         @id @default(autoincrement())
    createdAt     DateTime?   @default(now()) @map("created_at")
    code          String      @unique
    level         String?
    designation   String?
    acronym       String?
    gps           String?
    zone          String?
    department    String?
    dataManagerId String?     @map("data_manager_id") @db.Uuid
    DataEntry     DataEntry[]
    users         Users?      @relation(fields: [dataManagerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    profile       Profile[]

    @@map("organization_element")
    @@schema("hdb")
}

model Profile {
    id                      Int                  @id @default(autoincrement())
    createdAt               DateTime?            @default(now()) @map("created_at")
    theme                   String?
    roles                   Json?                @default("[]")
    active                  Boolean              @default(true)
    userId                  String               @unique @map("user_id") @db.Uuid
    organizationElementCode String?              @map("organization_element_code")
    organizationElement     OrganizationElement? @relation(fields: [organizationElementCode], references: [code], onDelete: NoAction, onUpdate: NoAction)
    users                   Users                @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@index([organizationElementCode], map: "idx_profile_organization_element_code")
    @@map("profile")
    @@schema("hdb")
}

model Role {
    id          Int       @id @default(autoincrement())
    createdAt   DateTime? @default(now()) @map("created_at")
    code        String    @unique
    designation String?

    @@map("role")
    @@schema("hdb")
}

model Variable {
    id           Int          @id @default(autoincrement())
    createdAt    DateTime?    @default(now()) @map("created_at")
    code         String       @unique
    designation  String?
    type         Json?        @default("[]")
    dataSourceId Int
    categoryCode String
    frequency    String?
    level        String?
    DataEntry    DataEntry[]
    DataCategory DataCategory @relation(fields: [categoryCode], references: [code], onDelete: NoAction, onUpdate: NoAction)
    DataSource   DataSource   @relation(fields: [dataSourceId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@index([categoryCode], map: "idx_variable_category_code")
    @@index([dataSourceId], map: "idx_variable_data_source_id")
    @@map("variable")
    @@schema("hdb")
}
