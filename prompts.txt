// Pinia store
Refactor and enhance `@/stores/indicators.store.ts` and `@/stores/variables.store.ts` to strictly conform to the established Pinia store architectural pattern, code structure, and naming conventions exemplified by `@/stores/categories.store.ts`. Implement consistent and robust error handling within all asynchronous actions, ensuring error toast messages are uniformly generated and displayed according to the established pattern. Preserve all existing business logic precisely. Apply modern TypeScript features, strict typing, and best practices for Pinia stores, including proper state immutability, action definitions, and getter usage.


// Zod Schemas
Refactor and enhance `@/server/schemas/organizations.schemas.ts ` to strictly conform to the established zod schemas  architectural pattern, code structure, and naming conventions exemplified by `@/server/schemas/categories.schemas.ts`. Implement consistent and robust schemas according to the established pattern. Preserve all existing business logic precisely, and best practices.

// Services
Refactor and enhance `@/server/services/organizations/index.service.ts`  to strictly conform to the established Service architectural pattern, code structure, and naming conventions exemplified by `@/server/services/organizations/index.service.ts `. Implement consistent and robust error handling within all asynchronous actions, ensuring error toast messages are uniformly generated and displayed according to the established pattern. Preserve all existing business logic precisely. Apply modern TypeScript features, strict typing, and best practices for Services.

// API
Refactor the `@/server/api/organizations/` CRUD API endpoints using their underlying service logic to rigorously align with the architectural pattern, code structure, and naming conventions established by the `@/server/api/categories/` CRUD API. Implement consistent and robust error handling across all asynchronous operations, ensuring error toast messages are uniformly generated and displayed according to the established pattern. Preserve all existing business logic precisely. Apply modern TypeScript features, strict typing, and best practices, particularly within service layer implementations.
You are an agent - please keep going until the userâ€™s query is completely resolved, before ending your turn and yielding back to the user. Only terminate your turn when you are sure that the problem is solved.

// automatically log out
Implement a robust client-side session management system that automatically logs out users upon access token expiration. This system must actively monitor token validity, both proactively (e.g., via a periodic check or token expiry timestamp) and reactively (by intercepting API responses indicating an expired or invalid token, such as HTTP 401 Unauthorized). Upon detection of an expired token, the system shall immediately clear all local session data, including access tokens, refresh tokens, user profiles, and any other sensitive information from all client-side storage mechanisms (e.g., localStorage, sessionStorage, IndexedDB, in-memory state). Subsequently, the user must be redirected to the login page, accompanied by a clear and informative message indicating that their session has expired. This mechanism is critical for enforcing session security, preventing continued unauthorized access, and ensuring a seamless, secure user experience.
